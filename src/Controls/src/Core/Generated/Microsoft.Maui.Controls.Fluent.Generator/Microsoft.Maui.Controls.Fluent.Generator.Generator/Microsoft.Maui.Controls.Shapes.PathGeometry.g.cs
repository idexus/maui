//
// <auto-generated>
//

#nullable enable


using System.Collections;
using System.Collections.ObjectModel;
using System.Collections.Generic;


namespace Microsoft.Maui.Controls.Shapes
{
	using Microsoft.Maui.Controls.Fluent;

	[FluentInterface]
	public partial class PathGeometry : IList<Microsoft.Maui.Controls.Shapes.PathFigure>
	{

        // ----- constructors -----

        public PathGeometry(out PathGeometry pathGeometry) : this()
        {
            pathGeometry = this;
        }

        public PathGeometry(Microsoft.Maui.Controls.Shapes.PathFigureCollection figures, out PathGeometry pathGeometry) : this(figures)
        {
            pathGeometry = this;
        }

        public PathGeometry(Microsoft.Maui.Controls.Shapes.PathFigureCollection figures, Microsoft.Maui.Controls.Shapes.FillRule fillRule, out PathGeometry pathGeometry) : this(figures, fillRule)
        {
            pathGeometry = this;
        }

        // ----- collection container -----

        public int Count => this.Figures.Count;
        public Microsoft.Maui.Controls.Shapes.PathFigure this[int index] { get => this.Figures[index]; set => this.Figures[index] = value; }
        public bool IsReadOnly => false;
        public void Add(Microsoft.Maui.Controls.Shapes.PathFigure item) => this.Figures.Add(item);
        public void Clear() => this.Figures.Clear();
        public bool Contains(Microsoft.Maui.Controls.Shapes.PathFigure item) => this.Figures.Contains(item);
        public void CopyTo(Microsoft.Maui.Controls.Shapes.PathFigure[] array, int arrayIndex) => this.Figures.CopyTo(array, arrayIndex);
        public IEnumerator<Microsoft.Maui.Controls.Shapes.PathFigure> GetEnumerator() => this.Figures.GetEnumerator();
        public int IndexOf(Microsoft.Maui.Controls.Shapes.PathFigure item) => this.Figures.IndexOf(item);
        public void Insert(int index, Microsoft.Maui.Controls.Shapes.PathFigure item) => this.Figures.Insert(index, item);
        public bool Remove(Microsoft.Maui.Controls.Shapes.PathFigure item) => this.Figures.Remove(item);
        public void RemoveAt(int index) => this.Figures.RemoveAt(index);
        IEnumerator IEnumerable.GetEnumerator() => this.Figures.GetEnumerator();

    }
}

#nullable restore
