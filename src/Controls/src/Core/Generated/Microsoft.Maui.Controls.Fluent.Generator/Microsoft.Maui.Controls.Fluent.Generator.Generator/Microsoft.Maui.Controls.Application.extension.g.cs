//
// <auto-generated>
//

#nullable enable
#pragma warning disable CS8601


namespace Microsoft.Maui.Controls
{
	using Microsoft.Maui.Controls.Fluent;

    public static class ApplicationGeneratedExtension
    {
        public static T MainPage<T>(this T obj,
            Microsoft.Maui.Controls.Page? mainPage)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.MainPage = mainPage;
            return obj;
        }
        
        public static T MainPage<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Page?>, ValueBuilder<Microsoft.Maui.Controls.Page?>> buidValue)
            where T : Microsoft.Maui.Controls.Application
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.Page?>());
            if (builder.ValueIsSet()) obj.MainPage = builder.GetValue();
            return obj;
        }
        
        public static T MainPage<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Page?>, LazyValueBuilder<Microsoft.Maui.Controls.Page?>> buidValue)
            where T : Microsoft.Maui.Controls.Application
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.Page?>());
            if (builder.ValueIsSet()) obj.MainPage = builder.GetValue();
            return obj;
        }
        
        public static T Resources<T>(this T obj,
            Microsoft.Maui.Controls.ResourceDictionary resources)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.Resources = resources;
            return obj;
        }
        
        public static T Resources<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>, ValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>> buidValue)
            where T : Microsoft.Maui.Controls.Application
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>());
            if (builder.ValueIsSet()) obj.Resources = builder.GetValue();
            return obj;
        }
        
        public static T Resources<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>, LazyValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>> buidValue)
            where T : Microsoft.Maui.Controls.Application
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>());
            if (builder.ValueIsSet()) obj.Resources = builder.GetValue();
            return obj;
        }
        
        public static T UserAppTheme<T>(this T obj,
            Microsoft.Maui.ApplicationModel.AppTheme userAppTheme)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.UserAppTheme = userAppTheme;
            return obj;
        }
        
        public static T UserAppTheme<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>, ValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>> buidValue)
            where T : Microsoft.Maui.Controls.Application
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>());
            if (builder.ValueIsSet()) obj.UserAppTheme = builder.GetValue();
            return obj;
        }
        
        public static T UserAppTheme<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>, LazyValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>> buidValue)
            where T : Microsoft.Maui.Controls.Application
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>());
            if (builder.ValueIsSet()) obj.UserAppTheme = builder.GetValue();
            return obj;
        }
        
        public static T OnRequestedThemeChanged<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.AppThemeChangedEventArgs> handler)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.RequestedThemeChanged += handler;
            return obj;
        }
        
        public static T OnRequestedThemeChanged<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.RequestedThemeChanged += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPopped<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPoppedEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.ModalPopped += handler;
            return obj;
        }
        
        public static T OnModalPopped<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.ModalPopped += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPopping<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPoppingEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.ModalPopping += handler;
            return obj;
        }
        
        public static T OnModalPopping<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.ModalPopping += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPushed<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPushedEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.ModalPushed += handler;
            return obj;
        }
        
        public static T OnModalPushed<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.ModalPushed += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPushing<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPushingEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.ModalPushing += handler;
            return obj;
        }
        
        public static T OnModalPushing<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.ModalPushing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPageAppearing<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.Page>? handler)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.PageAppearing += handler;
            return obj;
        }
        
        public static T OnPageAppearing<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.PageAppearing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPageDisappearing<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.Page>? handler)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.PageDisappearing += handler;
            return obj;
        }
        
        public static T OnPageDisappearing<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Application
        {
            obj.PageDisappearing += (o, arg) => action(obj);
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
