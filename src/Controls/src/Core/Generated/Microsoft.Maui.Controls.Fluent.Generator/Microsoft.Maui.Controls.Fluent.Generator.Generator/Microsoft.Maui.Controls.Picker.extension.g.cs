//
// <auto-generated>
//

#nullable enable
#pragma warning disable CS8601


namespace Microsoft.Maui.Controls
{
	using Microsoft.Maui.Controls.Fluent;

    public static class PickerGeneratedExtension
    {
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.FontAttributes = fontAttributes;
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FontAttributes>, ValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) obj.FontAttributes = builder.GetValue();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>, LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) obj.FontAttributes = builder.GetValue();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FontAttributes>, BindingBuilder<Microsoft.Maui.Controls.FontAttributes>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.FontAttributes>(obj, Microsoft.Maui.Controls.Picker.FontAttributesProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string fontFamily)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.FontFamily = fontFamily;
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) obj.FontFamily = builder.GetValue();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) obj.FontFamily = builder.GetValue();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<string>(obj, Microsoft.Maui.Controls.Picker.FontFamilyProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double fontSize)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.FontSize = fontSize;
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.FontSize = builder.GetValue();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.FontSize = builder.GetValue();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Picker.FontSizeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool fontAutoScalingEnabled)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.FontAutoScalingEnabled = fontAutoScalingEnabled;
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.FontAutoScalingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.FontAutoScalingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<bool>(obj, Microsoft.Maui.Controls.Picker.FontAutoScalingEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Items<T>(this T obj,
            System.Collections.Generic.IList<string> items)
            where T : Microsoft.Maui.Controls.Picker
        {
            foreach (var item in items)
                obj.Items.Add(item);
            return obj;
        }

        public static T Items<T>(this T obj,
            params string[] items)
            where T : Microsoft.Maui.Controls.Picker
        {
            foreach (var item in items)
                obj.Items.Add(item);
            return obj;
        }

        public static T Items<T>(this T obj,
            System.Func<LazyValueBuilder<System.Collections.Generic.IList<string>>, LazyValueBuilder<System.Collections.Generic.IList<string>>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<System.Collections.Generic.IList<string>>());
            if (builder.ValueIsSet())
            {
                var items = builder.GetValue();
                foreach (var item in items) 
                    obj.Items.Add(item);
            }
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Collections.IList itemsSource)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.ItemsSource = itemsSource;
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Func<ValueBuilder<System.Collections.IList>, ValueBuilder<System.Collections.IList>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<System.Collections.IList>());
            if (builder.ValueIsSet()) obj.ItemsSource = builder.GetValue();
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Func<LazyValueBuilder<System.Collections.IList>, LazyValueBuilder<System.Collections.IList>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<System.Collections.IList>());
            if (builder.ValueIsSet()) obj.ItemsSource = builder.GetValue();
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Func<BindingBuilder<System.Collections.IList>, BindingBuilder<System.Collections.IList>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<System.Collections.IList>(obj, Microsoft.Maui.Controls.Picker.ItemsSourceProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectedIndex<T>(this T obj,
            int selectedIndex)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.SelectedIndex = selectedIndex;
            return obj;
        }
        
        public static T SelectedIndex<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) obj.SelectedIndex = builder.GetValue();
            return obj;
        }
        
        public static T SelectedIndex<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) obj.SelectedIndex = builder.GetValue();
            return obj;
        }
        
        public static T SelectedIndex<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<int>(obj, Microsoft.Maui.Controls.Picker.SelectedIndexProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            object selectedItem)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.SelectedItem = selectedItem;
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SelectedItem = builder.GetValue();
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SelectedItem = builder.GetValue();
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.Picker.SelectedItemProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.TextColor = textColor;
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.Picker.TextColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double characterSpacing)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.CharacterSpacing = characterSpacing;
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.CharacterSpacing = builder.GetValue();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.CharacterSpacing = builder.GetValue();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Picker.CharacterSpacingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Title<T>(this T obj,
            string title)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.Title = title;
            return obj;
        }
        
        public static T Title<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) obj.Title = builder.GetValue();
            return obj;
        }
        
        public static T Title<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) obj.Title = builder.GetValue();
            return obj;
        }
        
        public static T Title<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<string>(obj, Microsoft.Maui.Controls.Picker.TitleProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TitleColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color titleColor)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.TitleColor = titleColor;
            return obj;
        }
        
        public static T TitleColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.TitleColor = builder.GetValue();
            return obj;
        }
        
        public static T TitleColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.TitleColor = builder.GetValue();
            return obj;
        }
        
        public static T TitleColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.Picker.TitleColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment horizontalTextAlignment)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.HorizontalTextAlignment = horizontalTextAlignment;
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) obj.HorizontalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.TextAlignment>, LazyValueBuilder<Microsoft.Maui.TextAlignment>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) obj.HorizontalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(obj, Microsoft.Maui.Controls.Picker.HorizontalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment verticalTextAlignment)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.VerticalTextAlignment = verticalTextAlignment;
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) obj.VerticalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.TextAlignment>, LazyValueBuilder<Microsoft.Maui.TextAlignment>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) obj.VerticalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buidBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(obj, Microsoft.Maui.Controls.Picker.VerticalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ItemDisplayBinding<T>(this T obj,
            Microsoft.Maui.Controls.BindingBase itemDisplayBinding)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.ItemDisplayBinding = itemDisplayBinding;
            return obj;
        }
        
        public static T ItemDisplayBinding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.BindingBase>, ValueBuilder<Microsoft.Maui.Controls.BindingBase>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.BindingBase>());
            if (builder.ValueIsSet()) obj.ItemDisplayBinding = builder.GetValue();
            return obj;
        }
        
        public static T ItemDisplayBinding<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.BindingBase>, LazyValueBuilder<Microsoft.Maui.Controls.BindingBase>> buidValue)
            where T : Microsoft.Maui.Controls.Picker
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.BindingBase>());
            if (builder.ValueIsSet()) obj.ItemDisplayBinding = builder.GetValue();
            return obj;
        }
        
        public static T OnSelectedIndexChanged<T>(this T obj, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.SelectedIndexChanged += handler;
            return obj;
        }
        
        public static T OnSelectedIndexChanged<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Picker
        {
            obj.SelectedIndexChanged += (o, arg) => action(obj);
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
