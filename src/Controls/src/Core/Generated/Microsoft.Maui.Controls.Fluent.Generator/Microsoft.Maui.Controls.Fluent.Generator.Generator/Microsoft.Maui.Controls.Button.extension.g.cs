//
// <auto-generated>
//

#nullable enable
#pragma warning disable CS8601


namespace Microsoft.Maui.Controls
{
	using Microsoft.Maui.Controls.Fluent;

    public static class ButtonGeneratedExtension
    {
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness padding)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.Padding = padding;
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) obj.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Thickness>, LazyValueBuilder<Microsoft.Maui.Thickness>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) obj.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Thickness>(obj, Microsoft.Maui.Controls.Button.PaddingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            Microsoft.Maui.LineBreakMode lineBreakMode)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.LineBreakMode = lineBreakMode;
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.LineBreakMode>, ValueBuilder<Microsoft.Maui.LineBreakMode>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.LineBreakMode>());
            if (builder.ValueIsSet()) obj.LineBreakMode = builder.GetValue();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.LineBreakMode>, LazyValueBuilder<Microsoft.Maui.LineBreakMode>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.LineBreakMode>());
            if (builder.ValueIsSet()) obj.LineBreakMode = builder.GetValue();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.LineBreakMode>, BindingBuilder<Microsoft.Maui.LineBreakMode>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.LineBreakMode>(obj, Microsoft.Maui.Controls.Button.LineBreakModeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color borderColor)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.BorderColor = borderColor;
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.BorderColor = builder.GetValue();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.BorderColor = builder.GetValue();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.Button.BorderColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            int cornerRadius)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.CornerRadius = cornerRadius;
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) obj.CornerRadius = builder.GetValue();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) obj.CornerRadius = builder.GetValue();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<int>(obj, Microsoft.Maui.Controls.Button.CornerRadiusProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            double borderWidth)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.BorderWidth = borderWidth;
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.BorderWidth = builder.GetValue();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.BorderWidth = builder.GetValue();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Button.BorderWidthProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            Microsoft.Maui.Controls.Button.ButtonContentLayout contentLayout)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.ContentLayout = contentLayout;
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>, ValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>());
            if (builder.ValueIsSet()) obj.ContentLayout = builder.GetValue();
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>, LazyValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>());
            if (builder.ValueIsSet()) obj.ContentLayout = builder.GetValue();
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>, BindingBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>(obj, Microsoft.Maui.Controls.Button.ContentLayoutProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand command)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.Command = command;
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) obj.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand>, LazyValueBuilder<System.Windows.Input.ICommand>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) obj.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<System.Windows.Input.ICommand>(obj, Microsoft.Maui.Controls.Button.CommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object commandParameter)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.CommandParameter = commandParameter;
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) obj.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.Button.CommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource imageSource)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.ImageSource = imageSource;
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) obj.ImageSource = builder.GetValue();
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>, LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) obj.ImageSource = builder.GetValue();
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(obj, Microsoft.Maui.Controls.Button.ImageSourceProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string text)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.Text = text;
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) obj.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) obj.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<string>(obj, Microsoft.Maui.Controls.Button.TextProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.TextColor = textColor;
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.Button.TextColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double characterSpacing)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.CharacterSpacing = characterSpacing;
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.CharacterSpacing = builder.GetValue();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.CharacterSpacing = builder.GetValue();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Button.CharacterSpacingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.FontAttributes = fontAttributes;
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FontAttributes>, ValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) obj.FontAttributes = builder.GetValue();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>, LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) obj.FontAttributes = builder.GetValue();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FontAttributes>, BindingBuilder<Microsoft.Maui.Controls.FontAttributes>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.FontAttributes>(obj, Microsoft.Maui.Controls.Button.FontAttributesProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string fontFamily)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.FontFamily = fontFamily;
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) obj.FontFamily = builder.GetValue();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) obj.FontFamily = builder.GetValue();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<string>(obj, Microsoft.Maui.Controls.Button.FontFamilyProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double fontSize)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.FontSize = fontSize;
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.FontSize = builder.GetValue();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.FontSize = builder.GetValue();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Button.FontSizeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool fontAutoScalingEnabled)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.FontAutoScalingEnabled = fontAutoScalingEnabled;
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.FontAutoScalingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.FontAutoScalingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<bool>(obj, Microsoft.Maui.Controls.Button.FontAutoScalingEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            Microsoft.Maui.TextTransform textTransform)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.TextTransform = textTransform;
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextTransform>, ValueBuilder<Microsoft.Maui.TextTransform>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.TextTransform>());
            if (builder.ValueIsSet()) obj.TextTransform = builder.GetValue();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.TextTransform>, LazyValueBuilder<Microsoft.Maui.TextTransform>> buidValue)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.TextTransform>());
            if (builder.ValueIsSet()) obj.TextTransform = builder.GetValue();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextTransform>, BindingBuilder<Microsoft.Maui.TextTransform>> buidBinding)
            where T : Microsoft.Maui.Controls.Button
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.TextTransform>(obj, Microsoft.Maui.Controls.Button.TextTransformProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnClicked<T>(this T obj, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.Clicked += handler;
            return obj;
        }
        
        public static T OnClicked<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.Clicked += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPressed<T>(this T obj, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.Pressed += handler;
            return obj;
        }
        
        public static T OnPressed<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.Pressed += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnReleased<T>(this T obj, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.Released += handler;
            return obj;
        }
        
        public static T OnReleased<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Button
        {
            obj.Released += (o, arg) => action(obj);
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
