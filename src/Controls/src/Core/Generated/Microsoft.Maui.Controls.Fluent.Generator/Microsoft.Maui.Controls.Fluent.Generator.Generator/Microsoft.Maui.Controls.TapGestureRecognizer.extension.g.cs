//
// <auto-generated>
//

#nullable enable
#pragma warning disable CS8601


namespace Microsoft.Maui.Controls
{
	using Microsoft.Maui.Controls.Fluent;

    public static class TapGestureRecognizerGeneratedExtension
    {
        public static Microsoft.Maui.Controls.TapGestureRecognizer Command(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Windows.Input.ICommand? command)
        {
            obj.Command = command;
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer Command(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand?>, ValueBuilder<System.Windows.Input.ICommand?>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<System.Windows.Input.ICommand?>());
            if (builder.ValueIsSet()) obj.Command = builder.GetValue();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer Command(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand?>, LazyValueBuilder<System.Windows.Input.ICommand?>> buidValue)
        {
            var builder = buidValue(new LazyValueBuilder<System.Windows.Input.ICommand?>());
            if (builder.ValueIsSet()) obj.Command = builder.GetValue();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer Command(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand?>, BindingBuilder<System.Windows.Input.ICommand?>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<System.Windows.Input.ICommand?>(obj, Microsoft.Maui.Controls.TapGestureRecognizer.CommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer CommandParameter(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            object? commandParameter)
        {
            obj.CommandParameter = commandParameter;
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer CommandParameter(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<ValueBuilder<object?>, ValueBuilder<object?>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<object?>());
            if (builder.ValueIsSet()) obj.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer CommandParameter(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<LazyValueBuilder<object?>, LazyValueBuilder<object?>> buidValue)
        {
            var builder = buidValue(new LazyValueBuilder<object?>());
            if (builder.ValueIsSet()) obj.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer CommandParameter(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<BindingBuilder<object?>, BindingBuilder<object?>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<object?>(obj, Microsoft.Maui.Controls.TapGestureRecognizer.CommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer NumberOfTapsRequired(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            int numberOfTapsRequired)
        {
            obj.NumberOfTapsRequired = numberOfTapsRequired;
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer NumberOfTapsRequired(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) obj.NumberOfTapsRequired = builder.GetValue();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer NumberOfTapsRequired(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buidValue)
        {
            var builder = buidValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) obj.NumberOfTapsRequired = builder.GetValue();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer NumberOfTapsRequired(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<int>(obj, Microsoft.Maui.Controls.TapGestureRecognizer.NumberOfTapsRequiredProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer Buttons(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            Microsoft.Maui.Controls.ButtonsMask buttons)
        {
            obj.Buttons = buttons;
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer Buttons(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ButtonsMask>, ValueBuilder<Microsoft.Maui.Controls.ButtonsMask>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.ButtonsMask>());
            if (builder.ValueIsSet()) obj.Buttons = builder.GetValue();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer Buttons(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ButtonsMask>, LazyValueBuilder<Microsoft.Maui.Controls.ButtonsMask>> buidValue)
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.ButtonsMask>());
            if (builder.ValueIsSet()) obj.Buttons = builder.GetValue();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer Buttons(this Microsoft.Maui.Controls.TapGestureRecognizer obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ButtonsMask>, BindingBuilder<Microsoft.Maui.Controls.ButtonsMask>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.ButtonsMask>(obj, Microsoft.Maui.Controls.TapGestureRecognizer.ButtonsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer OnTapped(this Microsoft.Maui.Controls.TapGestureRecognizer obj, System.EventHandler<Microsoft.Maui.Controls.TappedEventArgs>? handler)
        {
            obj.Tapped += handler;
            return obj;
        }
        
        public static Microsoft.Maui.Controls.TapGestureRecognizer OnTapped(this Microsoft.Maui.Controls.TapGestureRecognizer obj, System.Action<Microsoft.Maui.Controls.TapGestureRecognizer> action)
        {
            obj.Tapped += (o, arg) => action(obj);
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
