//
// <auto-generated>
//

#nullable enable
#pragma warning disable CS8601


namespace Microsoft.Maui.Controls
{
	using Microsoft.Maui.Controls.Fluent;

    public static class WindowGeneratedExtension
    {
        public static T Title<T>(this T obj,
            string? title)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Title = title;
            return obj;
        }
        
        public static T Title<T>(this T obj,
            System.Func<ValueBuilder<string?>, ValueBuilder<string?>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new ValueBuilder<string?>());
            if (builder.ValueIsSet()) obj.Title = builder.GetValue();
            return obj;
        }
        
        public static T Title<T>(this T obj,
            System.Func<LazyValueBuilder<string?>, LazyValueBuilder<string?>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new LazyValueBuilder<string?>());
            if (builder.ValueIsSet()) obj.Title = builder.GetValue();
            return obj;
        }
        
        public static T Title<T>(this T obj,
            System.Func<BindingBuilder<string?>, BindingBuilder<string?>> buidBinding)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidBinding(new BindingBuilder<string?>(obj, Microsoft.Maui.Controls.Window.TitleProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Page<T>(this T obj,
            Microsoft.Maui.Controls.Page? page)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Page = page;
            return obj;
        }
        
        public static T Page<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Page?>, ValueBuilder<Microsoft.Maui.Controls.Page?>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.Page?>());
            if (builder.ValueIsSet()) obj.Page = builder.GetValue();
            return obj;
        }
        
        public static T Page<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Page?>, LazyValueBuilder<Microsoft.Maui.Controls.Page?>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.Page?>());
            if (builder.ValueIsSet()) obj.Page = builder.GetValue();
            return obj;
        }
        
        public static T Page<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Page?>, BindingBuilder<Microsoft.Maui.Controls.Page?>> buidBinding)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.Page?>(obj, Microsoft.Maui.Controls.Window.PageProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T X<T>(this T obj,
            double x)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.X = x;
            return obj;
        }
        
        public static T X<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.X = builder.GetValue();
            return obj;
        }
        
        public static T X<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.X = builder.GetValue();
            return obj;
        }
        
        public static T X<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Window.XProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Y<T>(this T obj,
            double y)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Y = y;
            return obj;
        }
        
        public static T Y<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.Y = builder.GetValue();
            return obj;
        }
        
        public static T Y<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.Y = builder.GetValue();
            return obj;
        }
        
        public static T Y<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Window.YProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Width<T>(this T obj,
            double width)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Width = width;
            return obj;
        }
        
        public static T Width<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.Width = builder.GetValue();
            return obj;
        }
        
        public static T Width<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.Width = builder.GetValue();
            return obj;
        }
        
        public static T Width<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Window.WidthProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Height<T>(this T obj,
            double height)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Height = height;
            return obj;
        }
        
        public static T Height<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.Height = builder.GetValue();
            return obj;
        }
        
        public static T Height<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.Height = builder.GetValue();
            return obj;
        }
        
        public static T Height<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Window.HeightProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MaximumWidth<T>(this T obj,
            double maximumWidth)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.MaximumWidth = maximumWidth;
            return obj;
        }
        
        public static T MaximumWidth<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.MaximumWidth = builder.GetValue();
            return obj;
        }
        
        public static T MaximumWidth<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.MaximumWidth = builder.GetValue();
            return obj;
        }
        
        public static T MaximumWidth<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Window.MaximumWidthProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MaximumHeight<T>(this T obj,
            double maximumHeight)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.MaximumHeight = maximumHeight;
            return obj;
        }
        
        public static T MaximumHeight<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.MaximumHeight = builder.GetValue();
            return obj;
        }
        
        public static T MaximumHeight<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.MaximumHeight = builder.GetValue();
            return obj;
        }
        
        public static T MaximumHeight<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Window.MaximumHeightProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MinimumWidth<T>(this T obj,
            double minimumWidth)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.MinimumWidth = minimumWidth;
            return obj;
        }
        
        public static T MinimumWidth<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.MinimumWidth = builder.GetValue();
            return obj;
        }
        
        public static T MinimumWidth<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.MinimumWidth = builder.GetValue();
            return obj;
        }
        
        public static T MinimumWidth<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Window.MinimumWidthProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MinimumHeight<T>(this T obj,
            double minimumHeight)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.MinimumHeight = minimumHeight;
            return obj;
        }
        
        public static T MinimumHeight<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.MinimumHeight = builder.GetValue();
            return obj;
        }
        
        public static T MinimumHeight<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.MinimumHeight = builder.GetValue();
            return obj;
        }
        
        public static T MinimumHeight<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Window.MinimumHeightProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlowDirection<T>(this T obj,
            Microsoft.Maui.FlowDirection flowDirection)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.FlowDirection = flowDirection;
            return obj;
        }
        
        public static T FlowDirection<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.FlowDirection>, ValueBuilder<Microsoft.Maui.FlowDirection>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.FlowDirection>());
            if (builder.ValueIsSet()) obj.FlowDirection = builder.GetValue();
            return obj;
        }
        
        public static T FlowDirection<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.FlowDirection>, LazyValueBuilder<Microsoft.Maui.FlowDirection>> buidValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.FlowDirection>());
            if (builder.ValueIsSet()) obj.FlowDirection = builder.GetValue();
            return obj;
        }
        
        public static T FlowDirection<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.FlowDirection>, BindingBuilder<Microsoft.Maui.FlowDirection>> buidBinding)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.FlowDirection>(obj, Microsoft.Maui.Controls.Window.FlowDirectionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnSizeChanged<T>(this T obj, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.SizeChanged += handler;
            return obj;
        }
        
        public static T OnSizeChanged<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.SizeChanged += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPopped<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPoppedEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.ModalPopped += handler;
            return obj;
        }
        
        public static T OnModalPopped<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.ModalPopped += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPopping<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPoppingEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.ModalPopping += handler;
            return obj;
        }
        
        public static T OnModalPopping<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.ModalPopping += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPushed<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPushedEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.ModalPushed += handler;
            return obj;
        }
        
        public static T OnModalPushed<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.ModalPushed += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPushing<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPushingEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.ModalPushing += handler;
            return obj;
        }
        
        public static T OnModalPushing<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.ModalPushing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPopCanceled<T>(this T obj, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.PopCanceled += handler;
            return obj;
        }
        
        public static T OnPopCanceled<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.PopCanceled += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnCreated<T>(this T obj, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Created += handler;
            return obj;
        }
        
        public static T OnCreated<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Created += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnResumed<T>(this T obj, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Resumed += handler;
            return obj;
        }
        
        public static T OnResumed<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Resumed += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnActivated<T>(this T obj, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Activated += handler;
            return obj;
        }
        
        public static T OnActivated<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Activated += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDeactivated<T>(this T obj, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Deactivated += handler;
            return obj;
        }
        
        public static T OnDeactivated<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Deactivated += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnStopped<T>(this T obj, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Stopped += handler;
            return obj;
        }
        
        public static T OnStopped<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Stopped += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDestroying<T>(this T obj, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Destroying += handler;
            return obj;
        }
        
        public static T OnDestroying<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Destroying += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnBackgrounding<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.BackgroundingEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Backgrounding += handler;
            return obj;
        }
        
        public static T OnBackgrounding<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.Backgrounding += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDisplayDensityChanged<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.DisplayDensityChangedEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.DisplayDensityChanged += handler;
            return obj;
        }
        
        public static T OnDisplayDensityChanged<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            obj.DisplayDensityChanged += (o, arg) => action(obj);
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
