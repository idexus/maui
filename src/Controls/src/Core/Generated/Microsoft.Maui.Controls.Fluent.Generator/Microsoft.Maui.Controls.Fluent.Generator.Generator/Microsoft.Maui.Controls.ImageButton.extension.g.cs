//
// <auto-generated>
//

#nullable enable
#pragma warning disable CS8601


namespace Microsoft.Maui.Controls
{
	using Microsoft.Maui.Controls.Fluent;

    public static class ImageButtonGeneratedExtension
    {
        public static T BorderColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color borderColor)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.BorderColor = borderColor;
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.BorderColor = builder.GetValue();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.BorderColor = builder.GetValue();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.ImageButton.BorderColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            int cornerRadius)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.CornerRadius = cornerRadius;
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) obj.CornerRadius = builder.GetValue();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) obj.CornerRadius = builder.GetValue();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buidBinding)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidBinding(new BindingBuilder<int>(obj, Microsoft.Maui.Controls.ImageButton.CornerRadiusProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            double borderWidth)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.BorderWidth = borderWidth;
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.BorderWidth = builder.GetValue();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.BorderWidth = builder.GetValue();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.ImageButton.BorderWidthProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            Microsoft.Maui.Aspect aspect)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.Aspect = aspect;
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Aspect>, ValueBuilder<Microsoft.Maui.Aspect>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Aspect>());
            if (builder.ValueIsSet()) obj.Aspect = builder.GetValue();
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Aspect>, LazyValueBuilder<Microsoft.Maui.Aspect>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Aspect>());
            if (builder.ValueIsSet()) obj.Aspect = builder.GetValue();
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Aspect>, BindingBuilder<Microsoft.Maui.Aspect>> buidBinding)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Aspect>(obj, Microsoft.Maui.Controls.ImageButton.AspectProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            bool isOpaque)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.IsOpaque = isOpaque;
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.IsOpaque = builder.GetValue();
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.IsOpaque = builder.GetValue();
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buidBinding)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidBinding(new BindingBuilder<bool>(obj, Microsoft.Maui.Controls.ImageButton.IsOpaqueProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand command)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.Command = command;
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) obj.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand>, LazyValueBuilder<System.Windows.Input.ICommand>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new LazyValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) obj.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buidBinding)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidBinding(new BindingBuilder<System.Windows.Input.ICommand>(obj, Microsoft.Maui.Controls.ImageButton.CommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object commandParameter)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.CommandParameter = commandParameter;
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) obj.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.ImageButton.CommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Source<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource source)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.Source = source;
            return obj;
        }
        
        public static T Source<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) obj.Source = builder.GetValue();
            return obj;
        }
        
        public static T Source<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>, LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) obj.Source = builder.GetValue();
            return obj;
        }
        
        public static T Source<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buidBinding)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(obj, Microsoft.Maui.Controls.ImageButton.SourceProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness padding)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.Padding = padding;
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) obj.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Thickness>, LazyValueBuilder<Microsoft.Maui.Thickness>> buidValue)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) obj.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buidBinding)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Thickness>(obj, Microsoft.Maui.Controls.ImageButton.PaddingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnClicked<T>(this T obj, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.Clicked += handler;
            return obj;
        }
        
        public static T OnClicked<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.Clicked += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPressed<T>(this T obj, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.Pressed += handler;
            return obj;
        }
        
        public static T OnPressed<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.Pressed += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnReleased<T>(this T obj, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.Released += handler;
            return obj;
        }
        
        public static T OnReleased<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.ImageButton
        {
            obj.Released += (o, arg) => action(obj);
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
