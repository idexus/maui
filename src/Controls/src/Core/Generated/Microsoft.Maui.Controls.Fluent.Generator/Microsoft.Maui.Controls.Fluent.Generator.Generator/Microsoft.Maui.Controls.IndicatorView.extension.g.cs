//
// <auto-generated>
//

#nullable enable
#pragma warning disable CS8601


namespace Microsoft.Maui.Controls
{
	using Microsoft.Maui.Controls.Fluent;

    public static class IndicatorViewGeneratedExtension
    {
        public static T IndicatorsShape<T>(this T obj,
            Microsoft.Maui.Controls.IndicatorShape indicatorsShape)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            obj.IndicatorsShape = indicatorsShape;
            return obj;
        }
        
        public static T IndicatorsShape<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.IndicatorShape>, ValueBuilder<Microsoft.Maui.Controls.IndicatorShape>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.IndicatorShape>());
            if (builder.ValueIsSet()) obj.IndicatorsShape = builder.GetValue();
            return obj;
        }
        
        public static T IndicatorsShape<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.IndicatorShape>, LazyValueBuilder<Microsoft.Maui.Controls.IndicatorShape>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.IndicatorShape>());
            if (builder.ValueIsSet()) obj.IndicatorsShape = builder.GetValue();
            return obj;
        }
        
        public static T IndicatorsShape<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.IndicatorShape>, BindingBuilder<Microsoft.Maui.Controls.IndicatorShape>> buidBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.IndicatorShape>(obj, Microsoft.Maui.Controls.IndicatorView.IndicatorsShapeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IndicatorLayout<T>(this T obj,
            Microsoft.Maui.Controls.IBindableLayout indicatorLayout)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            obj.IndicatorLayout = indicatorLayout;
            return obj;
        }
        
        public static T IndicatorLayout<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.IBindableLayout>, ValueBuilder<Microsoft.Maui.Controls.IBindableLayout>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.IBindableLayout>());
            if (builder.ValueIsSet()) obj.IndicatorLayout = builder.GetValue();
            return obj;
        }
        
        public static T IndicatorLayout<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.IBindableLayout>, LazyValueBuilder<Microsoft.Maui.Controls.IBindableLayout>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.IBindableLayout>());
            if (builder.ValueIsSet()) obj.IndicatorLayout = builder.GetValue();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            int position)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            obj.Position = position;
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) obj.Position = builder.GetValue();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) obj.Position = builder.GetValue();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buidBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidBinding(new BindingBuilder<int>(obj, Microsoft.Maui.Controls.IndicatorView.PositionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Count<T>(this T obj,
            int count)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            obj.Count = count;
            return obj;
        }
        
        public static T Count<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) obj.Count = builder.GetValue();
            return obj;
        }
        
        public static T Count<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) obj.Count = builder.GetValue();
            return obj;
        }
        
        public static T Count<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buidBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidBinding(new BindingBuilder<int>(obj, Microsoft.Maui.Controls.IndicatorView.CountProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MaximumVisible<T>(this T obj,
            int maximumVisible)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            obj.MaximumVisible = maximumVisible;
            return obj;
        }
        
        public static T MaximumVisible<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) obj.MaximumVisible = builder.GetValue();
            return obj;
        }
        
        public static T MaximumVisible<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) obj.MaximumVisible = builder.GetValue();
            return obj;
        }
        
        public static T MaximumVisible<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buidBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidBinding(new BindingBuilder<int>(obj, Microsoft.Maui.Controls.IndicatorView.MaximumVisibleProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IndicatorTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate indicatorTemplate)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            obj.IndicatorTemplate = indicatorTemplate;
            return obj;
        }
        
        public static T IndicatorTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) obj.IndicatorTemplate = builder.GetValue();
            return obj;
        }
        
        public static T IndicatorTemplate<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>, LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) obj.IndicatorTemplate = builder.GetValue();
            return obj;
        }
        
        public static T IndicatorTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buidBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(obj, Microsoft.Maui.Controls.IndicatorView.IndicatorTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HideSingle<T>(this T obj,
            bool hideSingle)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            obj.HideSingle = hideSingle;
            return obj;
        }
        
        public static T HideSingle<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.HideSingle = builder.GetValue();
            return obj;
        }
        
        public static T HideSingle<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.HideSingle = builder.GetValue();
            return obj;
        }
        
        public static T HideSingle<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buidBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidBinding(new BindingBuilder<bool>(obj, Microsoft.Maui.Controls.IndicatorView.HideSingleProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IndicatorColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color indicatorColor)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            obj.IndicatorColor = indicatorColor;
            return obj;
        }
        
        public static T IndicatorColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.IndicatorColor = builder.GetValue();
            return obj;
        }
        
        public static T IndicatorColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.IndicatorColor = builder.GetValue();
            return obj;
        }
        
        public static T IndicatorColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectedIndicatorColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color selectedIndicatorColor)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            obj.SelectedIndicatorColor = selectedIndicatorColor;
            return obj;
        }
        
        public static T SelectedIndicatorColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.SelectedIndicatorColor = builder.GetValue();
            return obj;
        }
        
        public static T SelectedIndicatorColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.SelectedIndicatorColor = builder.GetValue();
            return obj;
        }
        
        public static T SelectedIndicatorColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IndicatorSize<T>(this T obj,
            double indicatorSize)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            obj.IndicatorSize = indicatorSize;
            return obj;
        }
        
        public static T IndicatorSize<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.IndicatorSize = builder.GetValue();
            return obj;
        }
        
        public static T IndicatorSize<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) obj.IndicatorSize = builder.GetValue();
            return obj;
        }
        
        public static T IndicatorSize<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Collections.IEnumerable itemsSource)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            obj.ItemsSource = itemsSource;
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Func<ValueBuilder<System.Collections.IEnumerable>, ValueBuilder<System.Collections.IEnumerable>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new ValueBuilder<System.Collections.IEnumerable>());
            if (builder.ValueIsSet()) obj.ItemsSource = builder.GetValue();
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Func<LazyValueBuilder<System.Collections.IEnumerable>, LazyValueBuilder<System.Collections.IEnumerable>> buidValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidValue(new LazyValueBuilder<System.Collections.IEnumerable>());
            if (builder.ValueIsSet()) obj.ItemsSource = builder.GetValue();
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Func<BindingBuilder<System.Collections.IEnumerable>, BindingBuilder<System.Collections.IEnumerable>> buidBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buidBinding(new BindingBuilder<System.Collections.IEnumerable>(obj, Microsoft.Maui.Controls.IndicatorView.ItemsSourceProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
