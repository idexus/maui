//
// <auto-generated>
//

#nullable enable


using System.Collections;
using System.Collections.ObjectModel;
using System.Collections.Generic;


namespace Microsoft.Maui.Controls
{
	public partial class VisualStateGroup : IList<Microsoft.Maui.Controls.VisualState>
	{

        // ----- constructors -----

        public VisualStateGroup(out VisualStateGroup visualStateGroup) : this()
        {
            visualStateGroup = this;
        }

        public VisualStateGroup(string name, out VisualStateGroup visualStateGroup) : this(name)
        {
            visualStateGroup = this;
        }

        // ----- collection container -----

        public int Count => this.States.Count;
        public Microsoft.Maui.Controls.VisualState this[int index] { get => this.States[index]; set => this.States[index] = value; }
        public bool IsReadOnly => false;
        public void Add(Microsoft.Maui.Controls.VisualState item) => this.States.Add(item);
        public void Clear() => this.States.Clear();
        public bool Contains(Microsoft.Maui.Controls.VisualState item) => this.States.Contains(item);
        public void CopyTo(Microsoft.Maui.Controls.VisualState[] array, int arrayIndex) => this.States.CopyTo(array, arrayIndex);
        public IEnumerator<Microsoft.Maui.Controls.VisualState> GetEnumerator() => this.States.GetEnumerator();
        public int IndexOf(Microsoft.Maui.Controls.VisualState item) => this.States.IndexOf(item);
        public void Insert(int index, Microsoft.Maui.Controls.VisualState item) => this.States.Insert(index, item);
        public bool Remove(Microsoft.Maui.Controls.VisualState item) => this.States.Remove(item);
        public void RemoveAt(int index) => this.States.RemoveAt(index);
        IEnumerator IEnumerable.GetEnumerator() => this.States.GetEnumerator();

    }
}

#nullable restore
