using System;
using Microsoft.CodeAnalysis;
using System.Text;
using System.Linq;
using System.Collections.Generic;

namespace Microsoft.Maui.Controls.Fluent.Generator
{
	public class ClassGenerator
	{
		public const string ContentPropertyAttributeString = "ContentPropertyAttribute";
		public const string DefaultValueAttributeString = "DefaultValueAttribute";
		public const string PropertyCallbackAttributeString = "PropertyCallbacksAttribute";

		GeneratorExecutionContext context;
		INamedTypeSymbol symbol;

		StringBuilder builder;

		string fullSymbolName = null;
		string containerPropertyName = null;
		bool singleItemContainer = false;
		string containerOfTypeName = null;
		bool isNewContainer = false;

		public ClassGenerator(GeneratorExecutionContext context, INamedTypeSymbol symbol)
		{
			this.context = context;
			this.symbol = symbol;

			this.fullSymbolName = symbol.ToDisplayString().Split('.').Last();

			SetupContainerIfNeeded();
		}

		void SetupContainerIfNeeded()
		{
			var isContainerThis = Helpers.IsGenericIList(symbol, out var _);
			if (!isContainerThis)
			{
				this.containerPropertyName = GetContentPropertyName();

				if (!string.IsNullOrEmpty(this.containerPropertyName))
				{
					var propertySymbol = FindPropertySymbolWithName(this.containerPropertyName);
					if (propertySymbol == null) throw new Exception($"No content property for: {symbol.ToDisplayString()}");

					var containerType = (INamedTypeSymbol)((propertySymbol).Type);
					if (Helpers.IsGenericIList(containerType, out var ofType))
					{
						this.containerOfTypeName = ofType.ToDisplayString();
						this.singleItemContainer = false;
					}
					else //if (!Helpers.IsIEnumerable(symbol))
					{
						this.containerOfTypeName = containerType.ToDisplayString();
						this.singleItemContainer = true;
					}
				}
			}
		}

		string GetContentPropertyName()
		{
			var attributeData = symbol.GetAttributes().FirstOrDefault(e => e.AttributeClass.Name.Equals(ContentPropertyAttributeString, StringComparison.Ordinal));

			isNewContainer = false;
			Helpers.LoopDownToObject(symbol.BaseType, type =>
			{
				isNewContainer = type.GetAttributes().FirstOrDefault(e => e.AttributeClass.Name.Equals(ContentPropertyAttributeString, StringComparison.Ordinal)) != null;
				return isNewContainer;
			});

			return attributeData != null ? (string)attributeData.ConstructorArguments[0].Value : null;
		}

		IPropertySymbol FindPropertySymbolWithName(string propertyName)
		{
			IPropertySymbol propertySymbol = GetPropertyFromInterface(propertyName);
			if (propertySymbol == null)
			{
				Helpers.LoopDownToObject(symbol, type =>
				{
					propertySymbol = (IPropertySymbol)(type.GetMembers(propertyName).FirstOrDefault());
					return propertySymbol != null;
				});
			}
			return propertySymbol;
		}

		public void Build()
		{
			builder = new StringBuilder();

			builder.AppendLine("//");
			builder.AppendLine("// <auto-generated>");
			builder.AppendLine("//");
			builder.AppendLine();

			builder.AppendLine("#nullable enable");
			builder.AppendLine();

			GenerateClassNamespace();

			builder.AppendLine();
			builder.AppendLine("#nullable restore");

			context.AddSource($"{symbol.ContainingNamespace.ToDisplayString()}.{Helpers.GetNormalizedName(symbol)}.g.cs", builder.ToString());
		}

		void GenerateClassNamespace()
		{
			var fluentAttributeString = FluentGenerator.IsFluentObject(symbol) ? "" : $@"using Microsoft.Maui.Controls.Fluent;

	[FluentInterface]
	";
			this.GenerateContainerUsingsIfNeeded();
			builder.AppendLine($@"
namespace {symbol.ContainingNamespace.ToDisplayString()}
{{
	{fluentAttributeString}public partial class {fullSymbolName}{BaseString()}
	{{");         
            GenerateClassBody();
            builder.AppendLine($@"
    }}
}}");
		}

		// ------- container usings -------

		void GenerateContainerUsingsIfNeeded()
		{
			if (containerOfTypeName != null)
				builder.AppendLine($@"
using System.Collections;
using System.Collections.ObjectModel;
using System.Collections.Generic;
");
		}

		// ------- base string -------

		string BaseString()
		{
			if (containerOfTypeName != null)
			{
				if (singleItemContainer)
					return $" : IEnumerable";
				else
					return $" : IList<{containerOfTypeName}>";
			}
			return "";
		}

		void GenerateClassBody()
		{
			GenerateConstructors();
			GenerateSingleItemContainer();
			GenerateCollectionContainer();
			GenerateBindableProperties();
		}

		// ---------------------------------
		// ----- single item container -----
		// ---------------------------------

		void GenerateSingleItemContainer()
		{
			if (containerOfTypeName != null && singleItemContainer == true)
			{
				var newPrefix = isNewContainer ? " new" : "";

				builder.AppendLine($@"
        // ----- single item container -----

        public{newPrefix} IEnumerator GetEnumerator() {{ yield return this.{containerPropertyName}; }}

        public{newPrefix} void Add({containerOfTypeName} {containerPropertyName.ToLower()}) => this.{containerPropertyName} = {containerPropertyName.ToLower()};");
			}
		}

		// --------------------------------
		// ----- collection container -----    
		// --------------------------------

		void GenerateCollectionContainer()
		{

			if (containerOfTypeName != null && singleItemContainer == false)
			{
				var prefix = $"this.{containerPropertyName}";
				var newPrefix = isNewContainer ? " new" : "";

				builder.AppendLine($@"
        // ----- collection container -----

        public{newPrefix} int Count => {prefix}.Count;
        public{newPrefix} {containerOfTypeName} this[int index] {{ get => {prefix}[index]; set => {prefix}[index] = value; }}
        public{newPrefix} bool IsReadOnly => false;
        public{newPrefix} void Add({containerOfTypeName} item) => {prefix}.Add(item);
        public{newPrefix} void Clear() => {prefix}.Clear();
        public{newPrefix} bool Contains({containerOfTypeName} item) => {prefix}.Contains(item);
        public{newPrefix} void CopyTo({containerOfTypeName}[] array, int arrayIndex) => {prefix}.CopyTo(array, arrayIndex);
        public{newPrefix} IEnumerator<{containerOfTypeName}> GetEnumerator() => {prefix}.GetEnumerator();
        public{newPrefix} int IndexOf({containerOfTypeName} item) => {prefix}.IndexOf(item);
        public{newPrefix} void Insert(int index, {containerOfTypeName} item) => {prefix}.Insert(index, item);
        public{newPrefix} bool Remove({containerOfTypeName} item) => {prefix}.Remove(item);
        public{newPrefix} void RemoveAt(int index) => {prefix}.RemoveAt(index);
        IEnumerator IEnumerable.GetEnumerator() => {prefix}.GetEnumerator();");
			}
		}

		// ------------------------
		// ----- constructors -----
		// ------------------------

		// no params constructor

		void GenerateNoParamConstructor()
		{
				builder.AppendLine($@"
        public {symbol.Name}() {{ }}");
		}

		// additional constructors

		void GenerateConstructors()
		{
			var argsString = "";
			var baseArgsString = "";
			var thisTail = ": this()";
			var objectTail = "";
			var camelCaseName = Helpers.CamelCase(symbol.Name);

			var buildAdditionalConstructor = () =>
			{
				builder.AppendLine($@"
        public {symbol.Name}({argsString}out {fullSymbolName} {camelCaseName}{objectTail}) {thisTail}
        {{
            {camelCaseName}{objectTail} = this;
        }}");
			};

			builder.AppendLine($@"
        // ----- constructors -----");

			var isExplicitlyDeclared = symbol.Constructors.FirstOrDefault(e => e.DeclaredAccessibility == Accessibility.Public && e.Parameters.Count() == 0 && !e.IsImplicitlyDeclared) != null;
			var isImplicitlyDeclared = symbol.Constructors.FirstOrDefault(e => e.DeclaredAccessibility == Accessibility.Public && e.Parameters.Count() == 0 && e.IsImplicitlyDeclared) != null;

			// this() constructor
			if (isImplicitlyDeclared)
				GenerateNoParamConstructor();
			if (isImplicitlyDeclared || isExplicitlyDeclared)
				buildAdditionalConstructor();

			// this(...) constructors
			var constructors = symbol.Constructors.Where(e => e.DeclaredAccessibility == Accessibility.Public && e.Parameters.Count() > 0 && !e.IsImplicitlyDeclared);
			foreach (var constructor in constructors)
			{
				argsString = "";
				baseArgsString = "";

				var argsList = new List<string>();
				foreach (var argument in constructor.Parameters)
				{
					var camelCaseArgName = Helpers.CamelCase(argument.Name);
					argsList.Add(camelCaseArgName);

					argsString += $"{argument.Type.ToDisplayString()} {camelCaseArgName}, ";

					if (!string.IsNullOrEmpty(baseArgsString))
						baseArgsString += ", ";
					baseArgsString += $"{camelCaseArgName}";
				}

				thisTail = $": this({baseArgsString})";
				objectTail = argsList.Contains(camelCaseName, StringComparer.Ordinal) ? "Object" : "";
				buildAdditionalConstructor();
			}
		}

		// --------------------------------------
		// ---- generate bindable properties ----
		// --------------------------------------

		Dictionary<string, string> GetPropertyCallbacks(ISymbol symbol)
		{
			var data = new Dictionary<string, string>();
			var attributes = symbol.GetAttributes();
			var attributeData = attributes.FirstOrDefault(e => e.AttributeClass.Name.Equals(PropertyCallbackAttributeString, StringComparison.Ordinal));
			if (attributeData != null)
			{
				var arguments = attributeData.ConstructorArguments;
				if (arguments[0].Value != null)
					data["propertyChanged"] = (string)arguments[0].Value;
				if (arguments[1].Value != null)
					data["propertyChanging"] = (string)arguments[1].Value;
				if (arguments[2].Value != null)
					data["validateValue"] = (string)arguments[2].Value;
				if (arguments[3].Value != null)
					data["coerceValue"] = (string)arguments[3].Value;
				if (arguments[4].Value != null)
					data["defaultValueCreator"] = (string)arguments[4].Value;
				if (data.Count() == 0)
					throw new ArgumentException($"PropertyCallback attribute must have minmium one attribute defined, symbol: {symbol.ToDisplayString()}");
			}
			return data;
		}

		string GetDefaultValueString(ISymbol symbol, string typeName)
		{
			var attributes = symbol.GetAttributes();
			var attributeData = attributes.FirstOrDefault(e => e.AttributeClass.Name.Equals(DefaultValueAttributeString, StringComparison.Ordinal));
			if (attributeData != null)
			{

				var value = attributeData.ConstructorArguments[0].Value.ToString();
				if (typeName.Equals("string", StringComparison.Ordinal))
					value = $"\"{value}\"";
				if (typeName.Equals("double", StringComparison.Ordinal) || typeName.Equals("float", StringComparison.Ordinal))
					value = value.Replace(",", ".");
				return value;
			}
			return null;
		}

		IPropertySymbol GetPropertyFromInterface(string name)
		{
			if (Helpers.IsBindable(symbol))
			{
				var bindableInterfaces = symbol
					.Interfaces
					.Where(e => e.GetAttributes().FirstOrDefault(e => e.AttributeClass.Name.Equals(FluentGenerator.BindablePropertiesAttributeString, StringComparison.Ordinal)) != null);

				if (bindableInterfaces.Count() > 0)

				foreach (var inter in bindableInterfaces)
				{
					var properties = inter
						.GetMembers()
						.Where(e => e.Kind == SymbolKind.Property);

						foreach (var prop in properties)
							if (prop.Name.Equals(name, StringComparison.Ordinal))
								return (IPropertySymbol)prop;
				}
			}
			return null;
		}

		void GenerateBindableProperties()
		{
			if (Helpers.IsBindable(symbol))
			{
				var bindableInterfaces = symbol
					.Interfaces
					.Where(e => e.GetAttributes().FirstOrDefault(e => e.AttributeClass.Name.Equals(FluentGenerator.BindablePropertiesAttributeString, StringComparison.Ordinal)) != null);

				if (bindableInterfaces.Count() > 0)
					builder.AppendLine($@"
        // ----- bindable properties -----");

				foreach (var inter in bindableInterfaces)
				{
					var properties = inter
						.GetMembers()
						.Where(e => e.Kind == SymbolKind.Property);

					foreach (var prop in properties)
						GeneratePropertyForField((IPropertySymbol)prop);
				}
			}
		}

		void GeneratePropertyForField(IPropertySymbol propertySymbol)
		{
			var name = propertySymbol.Name;
			var typeName = propertySymbol.Type.ToDisplayString();
			var callbacks = GetPropertyCallbacks(propertySymbol);
			var defaultValueString = GetDefaultValueString(propertySymbol, typeName);
			var callbacksString = "";

			foreach (var callback in callbacks)
			{
				callbacksString = $@",
                {callback.Key}: {callback.Value}";
			}

			builder.Append($@"
        public static readonly Microsoft.Maui.Controls.BindableProperty {name}Property =
            Microsoft.Maui.Controls.BindableProperty.Create(
                nameof({name}),
                typeof({typeName}),
                typeof({symbol.ToDisplayString()}),
                {(defaultValueString != null ? $"({typeName}){defaultValueString}" : $"default({typeName})")}{callbacksString});

        public {typeName} {name}
        {{
            get => ({typeName})GetValue({name}Property);
            set => SetValue({name}Property, value);
        }}
        ");
		}
	}
}